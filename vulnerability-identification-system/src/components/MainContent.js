// import React, { useState } from 'react';
// import axios from 'axios';

// const practicesList = [
//     "Strict Mode",
//     "Consistent Naming Conventions",
//     "Declare Variables Properly",
//     "Use Arrow Functions",
//     "Write Modular Code",
//     "Avoid Eval",
//     "Strict Comparison",
//     "Avoid Null Values"
// ];

// const MainContent = () => {
//     const [selectedPractices, setSelectedPractices] = useState([]);
//     const [file, setFile] = useState(null);
//     const [results, setResults] = useState(null);
//     const [error, setError] = useState('');

//     const handleCheckboxChange = (practice) => {
//         setSelectedPractices(prev =>
//             prev.includes(practice) ? prev.filter(p => p !== practice) : [...prev, practice]
//         );
//     };

//     const handleFileChange = (event) => {
//       const selectedFile = event.target.files[0];
//       console.log('Selected file:', selectedFile);
  
//       // Check if a file is selected
//       if (!selectedFile) {
//           setError('Please select a file.');
//           return;
//       }
  
//       // Check if the selected file is a JavaScript file
//       if (selectedFile.type !== "application/javascript") {
//           setError('Please upload a .js file.');
//           setFile(null); // Reset file state
//           return;
//       }
  
//       // Set the selected file and clear any previous error
//       setFile(selectedFile);
//       setError('');
//   };
  

//     const handleSubmit = async () => {
//         if (!file) {
//             setError('Please upload a file.');
//             return;
//         }
//         if (selectedPractices.length === 0) {
//             setError('Please select at least one practice.');
//             return;
//         }

//         const formData = new FormData();
//         formData.append('file', file);
//         formData.append('practices', JSON.stringify(selectedPractices));

//         try {
//             const response = await axios.post('http://localhost:8080/api/v1/vulnerability/check', formData, {
//                 headers: {
//                     'Content-Type': 'multipart/form-data'
//                 }
//             });
//             setResults(response.data);
//             setError('');
//         } catch (error) {
//             setError('An error occurred while processing the file.');
//             console.error(error);
//         }
//     };

//     return (
//         <div className="main-content">
//             <h1>Vulnerability Identification System</h1>
//             <div className="content">
//                 <div className="left">
//                     <h2>Practices</h2>
//                     {practicesList.map((practice) => (
//                         <div key={practice}>
//                             <input
//                                 type="checkbox"
//                                 id={practice}
//                                 checked={selectedPractices.includes(practice)}
//                                 onChange={() => handleCheckboxChange(practice)}
//                             />
//                             <label htmlFor={practice}>{practice}</label>
//                         </div>
//                     ))}
//                 </div>
//                 <div className="right">
//                     <h2>Upload JavaScript File</h2>
//                     <input type="file" accept=".js" onChange={handleFileChange} />
//                     <button onClick={handleSubmit}>Check Vulnerabilities</button>
//                     {error && <p className="error">{error}</p>}
//                     {results && (
//                         <div className="results">
//                             <h2>Results</h2>
//                             {results.message ? (
//                                 <p>{results.message[0]}</p>
//                             ) : (
//                                 <ul>
//                                     {Object.entries(results).map(([practice, lines]) => (
//                                         <li key={practice}>
//                                             <strong>{practice}:</strong>
//                                             <ul>
//                                                 {lines.map((line, index) => (
//                                                     <li key={index}>{line}</li>
//                                                 ))}
//                                             </ul>
//                                         </li>
//                                     ))}
//                                 </ul>
//                             )}
//                         </div>
//                     )}
//                 </div>
//             </div>
//         </div>
//     );
// };

// export default MainContent;





































import React, { useState } from 'react';
import axios from 'axios';

const practicesList = [
    "Strict Mode",
    "Consistent Naming Conventions",
    "Declare Variables Properly",
    "Use Arrow Functions",
    "Write Modular Code",
    "Avoid Eval",
    "Strict Comparison",
    "Avoid Null Values"
];

const MainContent = () => {
    const [selectedPractices, setSelectedPractices] = useState([]);
    const [file, setFile] = useState(null);
    const [results, setResults] = useState(null);
    const [error, setError] = useState('');

    const handleCheckboxChange = (practice) => {
        setSelectedPractices(prev =>
            prev.includes(practice) ? prev.filter(p => p !== practice) : [...prev, practice]
        );
    };

    const handleFileChange = (event) => {
        const selectedFile = event.target.files[0];
        console.log('Selected file:', selectedFile);
        
        if (!selectedFile) {
            setError('Please select a file.');
            return;
        }
        
        const fileExtension = selectedFile.name.split('.').pop();
        if (fileExtension !== 'js') {
            setError('Please upload a .js file.');
            setFile(null);
            return;
        }
        
        setFile(selectedFile);
        setError('');
    };

    const handleSubmit = async () => {
        if (!file) {
            setError('Please upload a file.');
            return;
        }
        if (selectedPractices.length === 0) {
            setError('Please select at least one practice.');
            return;
        }

        const formData = new FormData();
        formData.append('file', file);
        formData.append('practices', JSON.stringify(selectedPractices));

        try {
            const response = await axios.post('http://localhost:8080/api/v1/vulnerability/check', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });
            console.log('Response:', response);
            setResults(response.data);
            setError('');
        } catch (error) {
            console.error('Error:', error);
            if (error.response && error.response.data) {
                setError(`Server error: ${error.response.data.message}`);
            } else {
                setError('An error occurred while processing the file.');
            }
        }
    };

    return (
        <div className="main-content">
            <h1>Vulnerability Identification System</h1>
            <div className="content">
                <div className="left">
                    <h2>Practices</h2>
                    {practicesList.map((practice) => (
                        <div key={practice}>
                            <input
                                type="checkbox"
                                id={practice}
                                checked={selectedPractices.includes(practice)}
                                onChange={() => handleCheckboxChange(practice)}
                            />
                            <label htmlFor={practice}>{practice}</label>
                        </div>
                    ))}
                </div>
                <div className="right">
                    <h2>Upload JavaScript File</h2>
                    <input type="file" accept=".js" onChange={handleFileChange} />
                    <button onClick={handleSubmit}>Check Vulnerabilities</button>
                    {error && <p className="error">{error}</p>}
                    {results && (
                        <div className="results">
                            <h2>Results</h2>
                            {results.message ? (
                                <p>{results.message[0]}</p>
                            ) : (
                                <ul>
                                    {Object.entries(results).map(([practice, lines]) => (
                                        <li key={practice}>
                                            <strong>{practice}:</strong>
                                            <ul>
                                                {lines.map((line, index) => (
                                                    <li key={index}>{line}</li>
                                                ))}
                                            </ul>
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default MainContent;


